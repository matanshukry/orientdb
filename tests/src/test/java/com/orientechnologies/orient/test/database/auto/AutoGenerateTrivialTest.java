package com.orientechnologies.orient.test.database.auto;

import com.orientechnologies.orient.core.db.OPartitionedDatabasePoolFactory;
import com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx;
import com.orientechnologies.orient.core.metadata.schema.OClass;
import com.orientechnologies.orient.core.metadata.schema.OProperty;
import com.orientechnologies.orient.core.metadata.schema.OSchema;
import com.orientechnologies.orient.core.metadata.schema.OType;
import com.orientechnologies.orient.core.metadata.sequence.OSequence;
import com.orientechnologies.orient.core.metadata.sequence.OSequenceLibrary;
import com.orientechnologies.orient.core.record.impl.ODocument;
import org.testng.Assert;
import org.testng.annotations.Test;

/**
 * Created by matan on 2/11/2016.
 */
public class AutoGenerateTrivialTest {
  private static final int                      DOCUMENT_COUNT = 50;

  @Test
  public void test() throws Exception {
    final ODatabaseDocumentTx database = new ODatabaseDocumentTx("memory:defaultValues");
    try {

      database.create();

      // create example schema
      OSchema schema = database.getMetadata().getSchema();
      OSequenceLibrary seqLib = database.getMetadata().getSequenceLibrary();
      OSequence seq = seqLib.createSequence("seqTmp", OSequence.SEQUENCE_TYPE.ORDERED,
        new OSequence.CreateParams().setDefaults());
      OClass classPerson = schema.createClass("Person");

      //
      classPerson.createProperty("id", OType.LONG).setAutoGenerate("true"); // automatically created
      classPerson.createProperty("name", OType.STRING);
      classPerson.createProperty("secondId", OType.SHORT).setAutoGenerate(seq.getName());
      OProperty propThird = classPerson.createProperty("thirdId", OType.INTEGER).setAutoGenerate(seq.getName());

      // create documents
      ODocument[] docs = new ODocument[DOCUMENT_COUNT];
      createDocs(docs, classPerson, 0);

      // verify ids
      verifyIds(docs, true, 0);

      // remove auto generate
      propThird.setAutoGenerate(null);

      // create more documents
      createDocs(docs, classPerson, 2);

      // verify ids again
      verifyIds(docs, false, DOCUMENT_COUNT);

      //
    } finally {
      database.drop();
    }
  }

  private void createDocs(ODocument[] docs, OClass clazz, int step) {
    for (int i = 0; i < DOCUMENT_COUNT; ++i) {
      ODocument doc = new ODocument(clazz);
      doc.field("name", "autoGeneratedName (step " + step + ") #" + i);
      doc.save();
      docs[i] = doc;
    }
  }

  private void verifyIds(ODocument[] docs, boolean thirdExists, long start) {
    long start2 = start * 2 + 1;
    ++start;
    int inc = thirdExists ? 2 : 1;
    for (int i = 0; i < DOCUMENT_COUNT; ++i) {
      long id = docs[i].field("id");
      short secondId = docs[i].field("secondId");
      Integer thirdId = docs[i].field("thirdId");

      Assert.assertEquals(id, (i + start));
      Assert.assertEquals(secondId, (i * inc) + start2);
      if (thirdExists) {
        Assert.assertEquals(thirdId.intValue(), (i * inc) + start2 + 1);
      } else {
        Assert.assertEquals(thirdId, null);
      }
    }
  }
}
